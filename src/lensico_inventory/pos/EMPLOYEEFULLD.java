/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lensico_inventory.pos;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Airi
 */
public class EMPLOYEEFULLD extends javax.swing.JFrame {

     private static final String FILE_PATH = "C:\\Users\\Airi\\Documents\\employeee.txt";
     
    public EMPLOYEEFULLD() {
        initComponents();
        
        loadTableFromTextFile(employeee, FILE_PATH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        employeee = new javax.swing.JTable();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(400, 100, 1000, 700));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        employeee.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        employeee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Name", "Position", "Mobile Number", "Email", "Age", "Sex", "Bank Acc", "Acc No", "Contact Person", "Mobile Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(employeee);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 940, 550));

        edit.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        edit.setContentAreaFilled(false);
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        getContentPane().add(edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 650, 90, 30));

        delete.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        delete.setContentAreaFilled(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 650, 90, 30));

        exit.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        exit.setContentAreaFilled(false);
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 650, 40, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Airi\\Desktop\\List of employeee.png")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
      int selectedRow = employeee.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) employeee.getModel();

            String user = model.getValueAt(selectedRow, 0).toString();
            String poss = model.getValueAt(selectedRow, 1).toString();
            String num = model.getValueAt(selectedRow, 2).toString();
            String mail = model.getValueAt(selectedRow, 3).toString();
            String aa = model.getValueAt(selectedRow, 4).toString();
            String ge = model.getValueAt(selectedRow, 5).toString();
            String ba = model.getValueAt(selectedRow, 6).toString();
            String an = model.getValueAt(selectedRow, 7).toString();
            String cp = model.getValueAt(selectedRow, 8).toString();
            String cpn = model.getValueAt(selectedRow, 9).toString();

            String namePattern = "^[a-zA-Z ]+$";
            String numberPattern = "^09\\d{9}$";
            String digitsOnlyPattern = "^\\d+$";
            String emailPattern = "^.+@gmail\\.com$";

            boolean valid = false;

            while (!valid) {
                user = JOptionPane.showInputDialog(null, "Edit Name", user);
                if (user == null) return;
                user = user.trim();
                if (user.isEmpty() || !user.matches(namePattern)) {
                    JOptionPane.showMessageDialog(null, "Name must not be empty and contain only letters and spaces.");
                    continue;
                }

                poss = JOptionPane.showInputDialog(null, "Edit Position", poss);
                if (poss == null) return;
                poss = poss.trim();
                if (poss.isEmpty() || !poss.matches(namePattern)) {
                    JOptionPane.showMessageDialog(null, "Position must not be empty and contain only letters and spaces.");
                    continue;
                }

                num = JOptionPane.showInputDialog(null, "Edit Mobile Number", num);
                if (num == null) return;
                num = num.trim();
                if (!num.matches(numberPattern)) {
                    JOptionPane.showMessageDialog(null, "Mobile number must start with 09 and be exactly 11 digits.");
                    continue;
                }

                mail = JOptionPane.showInputDialog(null, "Edit Email", mail);
                if (mail == null) return;
                mail = mail.trim();
                if (!mail.matches(emailPattern)) {
                    JOptionPane.showMessageDialog(null, "Email must end with @gmail.com.");
                    continue;
                }

                aa = JOptionPane.showInputDialog(null, "Edit Age", aa);
                if (aa == null) return;
                aa = aa.trim();
                if (!aa.matches(digitsOnlyPattern)) {
                    JOptionPane.showMessageDialog(null, "Age must contain digits only.");
                    continue;
                }

                ge = JOptionPane.showInputDialog(null, "Edit Sex", ge);
                if (ge == null) return;
                ge = ge.trim();
                if (ge.isEmpty() || !ge.matches(namePattern)) {
                    JOptionPane.showMessageDialog(null, "Sex must not be empty and contain only letters and spaces.");
                    continue;
                }

                ba = JOptionPane.showInputDialog(null, "Edit Bank Account Name", ba);
                if (ba == null) return;
                ba = ba.trim();
                if (ba.isEmpty() || !ba.matches(namePattern)) {
                    JOptionPane.showMessageDialog(null, "Bank Account Name must not be empty and contain only letters and spaces.");
                    continue;
                }

                an = JOptionPane.showInputDialog(null, "Edit Account Number", an);
                if (an == null) return;
                an = an.trim();
                if (!an.matches(digitsOnlyPattern)) {
                    JOptionPane.showMessageDialog(null, "Account Number must contain digits only.");
                    continue;
                }

                cp = JOptionPane.showInputDialog(null, "Edit Contact Person", cp);
                if (cp == null) return;
                cp = cp.trim();
                if (cp.isEmpty() || !cp.matches(namePattern)) {
                    JOptionPane.showMessageDialog(null, "Contact Person must not be empty and contain only letters and spaces.");
                    continue;
                }

                cpn = JOptionPane.showInputDialog(null, "Edit Contact Person's Number", cpn);
                if (cpn == null) return;
                cpn = cpn.trim();
                if (!cpn.matches(numberPattern)) {
                    JOptionPane.showMessageDialog(null, "Contact Person's number must start with 09 and be exactly 11 digits.");
                    continue;
                }

                // New validations
                if (num.equals(cpn)) {
                    JOptionPane.showMessageDialog(null, "Contact Person's number must not be the same as the Mobile number.");
                    continue;
                }

                if (user.equalsIgnoreCase(cp)) {
                    JOptionPane.showMessageDialog(null, "Contact Person's name must not be the same as the Name.");
                    continue;
                }

                int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to update this entry?", "Confirm Edit", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    model.setValueAt(user, selectedRow, 0);
                    model.setValueAt(poss, selectedRow, 1);
                    model.setValueAt(num, selectedRow, 2);
                    model.setValueAt(mail, selectedRow, 3);
                    model.setValueAt(aa, selectedRow, 4);
                    model.setValueAt(ge, selectedRow, 5);
                    model.setValueAt(ba, selectedRow, 6);
                    model.setValueAt(an, selectedRow, 7);
                    model.setValueAt(cp, selectedRow, 8);
                    model.setValueAt(cpn, selectedRow, 9);

                    saveTableToTextFile(employeee, FILE_PATH);
                    JOptionPane.showMessageDialog(null, "Record updated successfully.");
                }

                valid = true;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to edit.");
        }

    }//GEN-LAST:event_editActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int selectedRow = employeee.getSelectedRow();

    if (selectedRow != -1) {
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this row?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) employeee.getModel();
            model.removeRow(selectedRow);

            // Save updated table to file
            saveTableToTextFile(employeee, FILE_PATH);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select a row to delete.");
    }
    }//GEN-LAST:event_deleteActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_exitActionPerformed

   
    //add codesss
    
     public void AddRowToJTable(Object[] dataRow) {
        DefaultTableModel model = (DefaultTableModel) employeee.getModel();
        model.addRow(dataRow);
    }

    public void saveTableToTextFile(JTable table, String filePath) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    writer.write(model.getValueAt(i, j).toString());
                    if (j < model.getColumnCount() - 1) writer.write("%%");
                }
                writer.newLine();
            }
            JOptionPane.showMessageDialog(null, "Data saved successfully.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving: " + e.getMessage());
        }
    }

        public void loadTableFromTextFile(JTable table, String filePath) {
    // Set the correct table model before loading data
    table.setModel(new javax.swing.table.DefaultTableModel(
        new Object[][] {},
        new String[] {
            "Employee ID", "Name", "Position", "Mobile Number", "Email", "Age", "Sex", "Bank Acc", "Acc No", "Contact Person", "Contact Person's Number"
        }
    ));

    DefaultTableModel model = (DefaultTableModel) table.getModel();

    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] rowData = line.split("%%");
            if (rowData.length == 11) {  // Make sure you expect 11 fields
                model.addRow(rowData);
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error loading data: " + e.getMessage());
    }
}
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EMPLOYEEFULLD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EMPLOYEEFULLD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EMPLOYEEFULLD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EMPLOYEEFULLD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EMPLOYEEFULLD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private static javax.swing.JTable employeee;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
